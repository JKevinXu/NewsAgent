{"statusCode":200,"headers":{"Content-Type":"application/json","Access-Control-Allow-Origin":"*","Access-Control-Allow-Methods":"GET, POST, OPTIONS","Access-Control-Allow-Headers":"Content-Type"},"body":"{\"statusCode\":200,\"message\":\"NewsAgent completed successfully\",\"timestamp\":\"2025-09-16T00:12:22.145Z\",\"source\":\"manual-invocation\",\"data\":{\"storiesProcessed\":5,\"stories\":[{\"title\":\"Hosting a website on a disposable vape\",\"url\":\"https://bogdanthegeek.github.io/blog/projects/vapeserver/\",\"score\":604,\"author\":\"BogdanTheGeek\",\"comments\":360,\"timestamp\":\"2025-09-15T17:53:19.000Z\",\"summary\":\"## Summary\\nThis article details a creative project where the author repurposed a disposable vape containing a PUYA ARM Cortex-M0+ microcontroller into a functional web server. The author discovered that modern \\\"disposable\\\" vapes use surprisingly capable microcontrollers with 24MHz processors, 24KiB flash storage, and 3KiB RAM. Using semihosting (a method for embedded systems to make system calls to a host debugger) and SLIP (Serial Line Internet Protocol), they connected the vape to the internet and configured it to serve web pages through the tiny microcontroller.\\n\\n## Key Insight\\nThe most intriguing takeaway is how seemingly disposable consumer electronics often contain surprisingly capable computing hardware that can be repurposed for creative technical projects. The author transformed what most would consider e-waste into a functional web server, demonstrating both the unnecessary waste in \\\"disposable\\\" electronics and the untapped potential in everyday discarded devices.\",\"audioUrl\":\"https://newsagent-audio-313117444016-us-west-2.s3.us-west-2.amazonaws.com/audio/2025-09-16/hosting-a-website-on-a-disposable-vape.mp3\"},{\"title\":\"William Gibson Reads Neuromancer (2004)\",\"url\":\"http://bearcave.com/bookrev/neuromancer/neuromancer_audio.html\",\"score\":104,\"author\":\"exvi\",\"comments\":19,\"timestamp\":\"2025-09-15T21:28:01.000Z\"},{\"title\":\"Why do software developers love complexity?\",\"url\":\"https://kyrylo.org/software/2025/08/21/why-do-software-developers-love-complexity.html\",\"score\":30,\"author\":\"PaulHoule\",\"comments\":34,\"timestamp\":\"2025-09-15T23:02:31.000Z\",\"summary\":\"## Summary\\nThe article explores why software developers gravitate toward complex solutions despite knowing the \\\"Keep It Simple, Stupid\\\" principle. It argues that complexity is marketable, signals expertise, and creates awe, turning it into a status symbol. The author compares modern software to pyramids—impressive but often empty inside—and contrasts this with simplicity, which is less flashy but more effective long-term. The piece uses examples like React versus vanilla JavaScript to illustrate how developers can be pulled into complexity by marketing, social pressure, intellectual curiosity, legacy systems, and career incentives.\\n\\n## Key Insight\\nComplexity in software often functions as a psychological and social tool rather than a technical necessity—it creates marketable products, signals expertise, and helps developers build professional identity, even when simpler solutions would work better. This suggests that many technical decisions are driven by human psychology and social dynamics rather than purely by technical merit.\",\"audioUrl\":\"https://newsagent-audio-313117444016-us-west-2.s3.us-west-2.amazonaws.com/audio/2025-09-16/why-do-software-developers-love-complexity-.mp3\"},{\"title\":\"React is winning by default and slowing innovation\",\"url\":\"https://www.lorenstew.art/blog/react-won-by-default/\",\"score\":217,\"author\":\"dbushell\",\"comments\":230,\"timestamp\":\"2025-09-15T17:46:01.000Z\",\"summary\":\"## Summary\\nThis article argues that React has become the default choice for frontend development not based on technical merit, but due to network effects and familiarity. The author contends this \\\"React-by-default\\\" mindset is stifling innovation by preventing alternative frameworks with superior technical approaches (like Svelte, Solid, and Qwik) from receiving fair consideration. The piece discusses React's technical limitations, including virtual DOM overhead and hook complexity, while highlighting how competing frameworks offer fundamentally different models with potentially higher performance ceilings.\\n\\n## Key Insight\\nThe most valuable takeaway is that reflexively choosing React creates significant opportunity costs - teams end up spending developer time managing React-specific issues (re-renders, effect dependencies, hydration) rather than evaluating whether alternative frameworks with different technical foundations might better suit their specific use cases, which ultimately constrains both performance potential and innovation in the frontend ecosystem.\",\"audioUrl\":\"https://newsagent-audio-313117444016-us-west-2.s3.us-west-2.amazonaws.com/audio/2025-09-16/react-is-winning-by-default-and-slowing-innovation.mp3\"},{\"title\":\"Addendum to GPT-5 system card: GPT-5-Codex\",\"url\":\"https://openai.com/index/gpt-5-system-card-addendum-gpt-5-codex/\",\"score\":162,\"author\":\"wertyk\",\"comments\":93,\"timestamp\":\"2025-09-15T18:45:32.000Z\"}],\"emailSent\":true}}"}